#ifndef _DATA_H
#define _DATA_H
#include <malloc.h>
#include "stdint.h"

typedef struct Data Data;
struct Data{
  uint32_t key;
  void *value;

};

Data *dataCreate(uint32_t key,void *name);
#endif // _DATA_H
#ifndef _HASHMAP_H
#define _HASHMAP_H
#include <stdio.h>
#include <stdint.h>
#include <malloc.h>
#include "linkedlist.h"
#include "data.h"
#include "integercompare.h"

#define SIZE_FACTOR 3



typedef struct HashTable HashTable;

struct HashTable{
  LinkedList *list;
  int size;
  int sizefactor;
};

void initHashMap(HashTable *table, int size);
void _HashMapAdd(HashTable *table, void *data,uint32_t key,int hashValue,Compare compareFunc);
void *_HashMapSearch(HashTable *table, uint32_t key,int index, Compare compareFunc);
void _HashMapRemove(HashTable *table, uint32_t key,int index, Compare compareFunc);
void HashMapAdd(HashTable *table,void *data,uint32_t key);
void *HashMapSearch(HashTable *table,void *data,uint32_t key);
void HashMapRemove(HashTable *table, void *data,uint32_t key);
uint32_t hashUsingModule(uint32_t value,uint32_t range);



#endif // _HASHMAP_H
#ifndef _HASHMAPSTRINGANDINTEGER_H
#define _HASHMAPSTRINGANDINTEGER_H
#include <stdio.h>
#include <stdint.h>
#include <malloc.h>
#include "linkedlist.h"
#include "data.h"
#include "integercompare.h"
#include "hashmap.h"

void HashMapAddInteger(HashTable *table,int *data,uint32_t key);
void HashMapAddString(HashTable *table,char *data,uint32_t key);

#endif // _HASHMAPSTRINGANDINTEGER_H
#ifndef _INTEGERCOMPARE_H
#define _INTEGERCOMPARE_H
#include "data.h"
#include "linkedlist.h"


int integerCompare(int value, int refvalue);
int CompareKey(uint32_t key,Data *data);

#endif // _INTEGERCOMPARE_H
#ifndef _LINKEDLIST_H
#define _LINKEDLIST_H
#include "data.h"


typedef struct Item Item;
typedef struct LinkedList LinkedList;

struct Item {
  Item *next;
  Data *data;
};

struct LinkedList{
  Item *head;
  Item *tail;
  int len;
};

typedef int(*Compare)(int value,void **refvalue);

void listInit(LinkedList *list);
void listAdd(LinkedList *list,Item *item);
void LinkRemove(LinkedList *list,uint32_t key,Compare comparefunc);
void createItem(Item *item,void *data, Item *next);
Data *linkSearch(LinkedList *list,uint32_t key,Compare comparefunc);
#endif // _LINKEDLIST_H
