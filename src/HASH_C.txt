#include "data.h"
#include "stdint.h"
#include "stdio.h"


Data *dataCreate(uint32_t key,void *value){
  Data *data = (Data *)malloc(sizeof(Data));
  data->key = key;
  data->value = value;

  return data;
}
#include "hashmap.h"


//used to resered a place to implement data
void initHashMap(HashTable *table, int size){
  table->list = (LinkedList *)calloc(size * SIZE_FACTOR, sizeof(LinkedList));
  table->size = size;
  table->sizefactor = SIZE_FACTOR;
}

//adding data into table and determine is the value is repeated in the HashTable
//if the key value has already in the table,it will remove the value and replace it with new value
void _HashMapAdd(HashTable *table, void *data,uint32_t key,int hashValue,Compare compareFunc){
  Item *newItem = (Item *)malloc(sizeof(Item));
  createItem(newItem,data,NULL);
  if(linkSearch(&table->list[hashValue],key,(Compare)compareFunc)==NULL){
    listAdd(&table->list[hashValue],newItem);
  }
  else{
    LinkRemove(&table->list[hashValue],key,(Compare)compareFunc);
    listAdd(&table->list[hashValue],newItem);
  }

}

//used to search value by using the key of the data
void *_HashMapSearch(HashTable *table,uint32_t key,int index, Compare compareFunc){
   return linkSearch(&table->list[index],key,(Compare)compareFunc);
}

//reemoving the data by its key value
void _HashMapRemove(HashTable *table,uint32_t key,int index, Compare compareFunc){
  return LinkRemove(&table->list[index],key,(Compare)compareFunc);
}

//use to calculate the place that the data should put into
uint32_t hashUsingModule(uint32_t value,uint32_t range){
  return value % range;
}
/********************************************************************/
void HashMapAdd(HashTable *table,void *data,uint32_t key){
  //compute hash value
  int hashValue = hashUsingModule(key,table->size);
  _HashMapAdd(table,data,key,hashValue,(Compare)CompareKey);
}

void *HashMapSearch(HashTable *table,void *data,uint32_t key){
  int hashValue = hashUsingModule(key,table->size);
  _HashMapSearch(table,key,hashValue,(Compare)CompareKey);
}

void HashMapRemove(HashTable *table, void *data,uint32_t key){
  int hashValue = hashUsingModule(key,table->size);
  _HashMapRemove(table,key,hashValue,(Compare)CompareKey);
}
#include "hashmapstringandinteger.h"

void HashMapAddInteger(HashTable *table,int *data,uint32_t key){
  int hashValue = hashUsingModule(key,table->size);
  _HashMapAdd(table,data,key,hashValue,(Compare)CompareKey);
}

void HashMapAddString(HashTable *table,char *data,uint32_t key){
  int hashValue = hashUsingModule(key,table->size);
  _HashMapAdd(table,data,key,hashValue,(Compare)CompareKey);
}
#include "integercompare.h"


int integerCompare(int value, int refvalue){
  if(value > refvalue){
    return 1;
  }
  else if(value <refvalue)
  {
    return -1;
  }
  else{
  return 0;
}
}


int CompareKey(uint32_t key,Data *data){
  if(key > data->key){
    return 1;
  }
  else if(key < data->key)
  {
    return -1;
  }
  else{
  return 0;
}
}
#include "linkedlist.h"



void listInit(LinkedList *list) {
  list->head = NULL;
  list->tail = NULL;
  list->len = 0;
}

void listAdd(LinkedList *list,Item *item){
    if(list->len == 0)
    {
    list->head = item;
    list->tail = item;


    }
    else
    {
	  list->tail->next=item;
      list->tail=item;

    }
    list->len += 1;
    item->next=NULL;

}

void createItem(Item *item,void *data, Item *next){

  item->data = data;
  item->next = next;

}

Data *linkSearch(LinkedList *list,uint32_t key,Compare comparefunc){
    Item *past = NULL;
    Item *now = list->head;
    if(now == NULL){
      return NULL;
    }
    else {
        while(comparefunc(key,(void*)&(((Data *)now->data))->key) !=0){
        past = now;
        now = now->next;
        if(now == NULL){
          break;
        }
      }
      if(now == NULL){
        return NULL;
      }
      else
      return now->data;
    }

}

void LinkRemove(LinkedList *list,uint32_t key,Compare comparefunc){
  Item *past = NULL;
	Item *now = list->head;

	//if(now == NULL){
//		return NULL;
//	else{
    while(comparefunc(key,(void*)&(((Data *)now->data))->key) !=0){
			past = now;
			now = now->next;
      if(now == NULL){
        break;
      }
		}
    if(now == list->head){
      if(list->head==list->tail){   //first head
       listInit(list);
     }
      else{
				now = now->next;
				list->head = now;
				list->len--;
      }
     }

	else if(now == list->tail){
		    list->tail=past;
		    past->next=NULL;
		    list->len--;
	     }
	  else{
      if(now == NULL){
        now = NULL;
      }
      else{
		  past->next = now->next;
		  list->len--;
    }
	   }
   }
//}
